{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import operator\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "np.random.seed(0)\n",
    "X=np.random.rand(100,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.5488135 ],\n",
       "       [0.71518937],\n",
       "       [0.60276338],\n",
       "       [0.54488318],\n",
       "       [0.4236548 ],\n",
       "       [0.64589411],\n",
       "       [0.43758721],\n",
       "       [0.891773  ],\n",
       "       [0.96366276],\n",
       "       [0.38344152],\n",
       "       [0.79172504],\n",
       "       [0.52889492],\n",
       "       [0.56804456],\n",
       "       [0.92559664],\n",
       "       [0.07103606],\n",
       "       [0.0871293 ],\n",
       "       [0.0202184 ],\n",
       "       [0.83261985],\n",
       "       [0.77815675],\n",
       "       [0.87001215],\n",
       "       [0.97861834],\n",
       "       [0.79915856],\n",
       "       [0.46147936],\n",
       "       [0.78052918],\n",
       "       [0.11827443],\n",
       "       [0.63992102],\n",
       "       [0.14335329],\n",
       "       [0.94466892],\n",
       "       [0.52184832],\n",
       "       [0.41466194],\n",
       "       [0.26455561],\n",
       "       [0.77423369],\n",
       "       [0.45615033],\n",
       "       [0.56843395],\n",
       "       [0.0187898 ],\n",
       "       [0.6176355 ],\n",
       "       [0.61209572],\n",
       "       [0.616934  ],\n",
       "       [0.94374808],\n",
       "       [0.6818203 ],\n",
       "       [0.3595079 ],\n",
       "       [0.43703195],\n",
       "       [0.6976312 ],\n",
       "       [0.06022547],\n",
       "       [0.66676672],\n",
       "       [0.67063787],\n",
       "       [0.21038256],\n",
       "       [0.1289263 ],\n",
       "       [0.31542835],\n",
       "       [0.36371077],\n",
       "       [0.57019677],\n",
       "       [0.43860151],\n",
       "       [0.98837384],\n",
       "       [0.10204481],\n",
       "       [0.20887676],\n",
       "       [0.16130952],\n",
       "       [0.65310833],\n",
       "       [0.2532916 ],\n",
       "       [0.46631077],\n",
       "       [0.24442559],\n",
       "       [0.15896958],\n",
       "       [0.11037514],\n",
       "       [0.65632959],\n",
       "       [0.13818295],\n",
       "       [0.19658236],\n",
       "       [0.36872517],\n",
       "       [0.82099323],\n",
       "       [0.09710128],\n",
       "       [0.83794491],\n",
       "       [0.09609841],\n",
       "       [0.97645947],\n",
       "       [0.4686512 ],\n",
       "       [0.97676109],\n",
       "       [0.60484552],\n",
       "       [0.73926358],\n",
       "       [0.03918779],\n",
       "       [0.28280696],\n",
       "       [0.12019656],\n",
       "       [0.2961402 ],\n",
       "       [0.11872772],\n",
       "       [0.31798318],\n",
       "       [0.41426299],\n",
       "       [0.0641475 ],\n",
       "       [0.69247212],\n",
       "       [0.56660145],\n",
       "       [0.26538949],\n",
       "       [0.52324805],\n",
       "       [0.09394051],\n",
       "       [0.5759465 ],\n",
       "       [0.9292962 ],\n",
       "       [0.31856895],\n",
       "       [0.66741038],\n",
       "       [0.13179786],\n",
       "       [0.7163272 ],\n",
       "       [0.28940609],\n",
       "       [0.18319136],\n",
       "       [0.58651293],\n",
       "       [0.02010755],\n",
       "       [0.82894003],\n",
       "       [0.00469548]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y=np.sin(2*np.pi*X)+np.random.rand(100,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.37589817],\n",
       "       [-0.70616765],\n",
       "       [ 0.13345127],\n",
       "       [ 0.68390235],\n",
       "       [ 0.71025825],\n",
       "       [-0.21742843],\n",
       "       [ 0.97421905],\n",
       "       [-0.05654912],\n",
       "       [-0.00325359],\n",
       "       [ 1.62137431],\n",
       "       [-0.51870546],\n",
       "       [ 0.66585226],\n",
       "       [ 0.28484889],\n",
       "       [-0.15321017],\n",
       "       [ 1.24545824],\n",
       "       [ 0.91701694],\n",
       "       [ 1.00779772],\n",
       "       [-0.28698531],\n",
       "       [-0.10265612],\n",
       "       [-0.03638478],\n",
       "       [ 0.59131312],\n",
       "       [-0.45135258],\n",
       "       [ 1.19575982],\n",
       "       [-0.3376686 ],\n",
       "       [ 1.10045852],\n",
       "       [-0.16380362],\n",
       "       [ 0.80296453],\n",
       "       [-0.03911964],\n",
       "       [ 0.52332724],\n",
       "       [ 0.80094617],\n",
       "       [ 1.61383628],\n",
       "       [-0.5596614 ],\n",
       "       [ 0.40751718],\n",
       "       [-0.11857319],\n",
       "       [ 0.68775064],\n",
       "       [-0.0827692 ],\n",
       "       [-0.07318916],\n",
       "       [-0.01717709],\n",
       "       [ 0.30597489],\n",
       "       [-0.47821909],\n",
       "       [ 1.66902704],\n",
       "       [ 0.75296061],\n",
       "       [-0.51048713],\n",
       "       [ 1.26136473],\n",
       "       [-0.06014556],\n",
       "       [-0.17434185],\n",
       "       [ 1.06940503],\n",
       "       [ 1.64381655],\n",
       "       [ 1.63092372],\n",
       "       [ 1.75429034],\n",
       "       [-0.27744934],\n",
       "       [ 1.24440619],\n",
       "       [ 0.08950856],\n",
       "       [ 1.21369021],\n",
       "       [ 1.0906239 ],\n",
       "       [ 1.69671628],\n",
       "       [-0.01302257],\n",
       "       [ 1.56888688],\n",
       "       [ 0.61728175],\n",
       "       [ 1.06855368],\n",
       "       [ 1.53826993],\n",
       "       [ 1.09278106],\n",
       "       [-0.10969174],\n",
       "       [ 1.62956814],\n",
       "       [ 1.91972354],\n",
       "       [ 1.59023174],\n",
       "       [-0.89043823],\n",
       "       [ 0.93293184],\n",
       "       [-0.12118566],\n",
       "       [ 0.73940772],\n",
       "       [ 0.37366578],\n",
       "       [ 0.25003711],\n",
       "       [ 0.05450043],\n",
       "       [-0.59361802],\n",
       "       [-0.20402781],\n",
       "       [ 0.46766843],\n",
       "       [ 1.32418155],\n",
       "       [ 1.61352818],\n",
       "       [ 1.66268475],\n",
       "       [ 0.71053687],\n",
       "       [ 1.07484392],\n",
       "       [ 1.13450022],\n",
       "       [ 0.96945491],\n",
       "       [-0.69748927],\n",
       "       [ 0.52785171],\n",
       "       [ 1.60929463],\n",
       "       [ 0.39007988],\n",
       "       [ 1.14647509],\n",
       "       [ 0.27084077],\n",
       "       [-0.11783137],\n",
       "       [ 1.3068399 ],\n",
       "       [-0.65850864],\n",
       "       [ 0.92284781],\n",
       "       [-0.03332953],\n",
       "       [ 1.70905523],\n",
       "       [ 1.40364108],\n",
       "       [-0.28978592],\n",
       "       [ 0.38036009],\n",
       "       [-0.82146654],\n",
       "       [ 0.46391489]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_b=np.c_[np.ones((100,1)),X]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.5488135 ],\n",
       "       [1.        , 0.71518937],\n",
       "       [1.        , 0.60276338],\n",
       "       [1.        , 0.54488318],\n",
       "       [1.        , 0.4236548 ],\n",
       "       [1.        , 0.64589411],\n",
       "       [1.        , 0.43758721],\n",
       "       [1.        , 0.891773  ],\n",
       "       [1.        , 0.96366276],\n",
       "       [1.        , 0.38344152],\n",
       "       [1.        , 0.79172504],\n",
       "       [1.        , 0.52889492],\n",
       "       [1.        , 0.56804456],\n",
       "       [1.        , 0.92559664],\n",
       "       [1.        , 0.07103606],\n",
       "       [1.        , 0.0871293 ],\n",
       "       [1.        , 0.0202184 ],\n",
       "       [1.        , 0.83261985],\n",
       "       [1.        , 0.77815675],\n",
       "       [1.        , 0.87001215],\n",
       "       [1.        , 0.97861834],\n",
       "       [1.        , 0.79915856],\n",
       "       [1.        , 0.46147936],\n",
       "       [1.        , 0.78052918],\n",
       "       [1.        , 0.11827443],\n",
       "       [1.        , 0.63992102],\n",
       "       [1.        , 0.14335329],\n",
       "       [1.        , 0.94466892],\n",
       "       [1.        , 0.52184832],\n",
       "       [1.        , 0.41466194],\n",
       "       [1.        , 0.26455561],\n",
       "       [1.        , 0.77423369],\n",
       "       [1.        , 0.45615033],\n",
       "       [1.        , 0.56843395],\n",
       "       [1.        , 0.0187898 ],\n",
       "       [1.        , 0.6176355 ],\n",
       "       [1.        , 0.61209572],\n",
       "       [1.        , 0.616934  ],\n",
       "       [1.        , 0.94374808],\n",
       "       [1.        , 0.6818203 ],\n",
       "       [1.        , 0.3595079 ],\n",
       "       [1.        , 0.43703195],\n",
       "       [1.        , 0.6976312 ],\n",
       "       [1.        , 0.06022547],\n",
       "       [1.        , 0.66676672],\n",
       "       [1.        , 0.67063787],\n",
       "       [1.        , 0.21038256],\n",
       "       [1.        , 0.1289263 ],\n",
       "       [1.        , 0.31542835],\n",
       "       [1.        , 0.36371077],\n",
       "       [1.        , 0.57019677],\n",
       "       [1.        , 0.43860151],\n",
       "       [1.        , 0.98837384],\n",
       "       [1.        , 0.10204481],\n",
       "       [1.        , 0.20887676],\n",
       "       [1.        , 0.16130952],\n",
       "       [1.        , 0.65310833],\n",
       "       [1.        , 0.2532916 ],\n",
       "       [1.        , 0.46631077],\n",
       "       [1.        , 0.24442559],\n",
       "       [1.        , 0.15896958],\n",
       "       [1.        , 0.11037514],\n",
       "       [1.        , 0.65632959],\n",
       "       [1.        , 0.13818295],\n",
       "       [1.        , 0.19658236],\n",
       "       [1.        , 0.36872517],\n",
       "       [1.        , 0.82099323],\n",
       "       [1.        , 0.09710128],\n",
       "       [1.        , 0.83794491],\n",
       "       [1.        , 0.09609841],\n",
       "       [1.        , 0.97645947],\n",
       "       [1.        , 0.4686512 ],\n",
       "       [1.        , 0.97676109],\n",
       "       [1.        , 0.60484552],\n",
       "       [1.        , 0.73926358],\n",
       "       [1.        , 0.03918779],\n",
       "       [1.        , 0.28280696],\n",
       "       [1.        , 0.12019656],\n",
       "       [1.        , 0.2961402 ],\n",
       "       [1.        , 0.11872772],\n",
       "       [1.        , 0.31798318],\n",
       "       [1.        , 0.41426299],\n",
       "       [1.        , 0.0641475 ],\n",
       "       [1.        , 0.69247212],\n",
       "       [1.        , 0.56660145],\n",
       "       [1.        , 0.26538949],\n",
       "       [1.        , 0.52324805],\n",
       "       [1.        , 0.09394051],\n",
       "       [1.        , 0.5759465 ],\n",
       "       [1.        , 0.9292962 ],\n",
       "       [1.        , 0.31856895],\n",
       "       [1.        , 0.66741038],\n",
       "       [1.        , 0.13179786],\n",
       "       [1.        , 0.7163272 ],\n",
       "       [1.        , 0.28940609],\n",
       "       [1.        , 0.18319136],\n",
       "       [1.        , 0.58651293],\n",
       "       [1.        , 0.02010755],\n",
       "       [1.        , 0.82894003],\n",
       "       [1.        , 0.00469548]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "theta=np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.43930973]\n",
      " [-1.89671609]]\n"
     ]
    }
   ],
   "source": [
    "print(theta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=X*theta[1]+theta[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.39836633],\n",
       "       [ 0.08279856],\n",
       "       [ 0.29603874],\n",
       "       [ 0.40582103],\n",
       "       [ 0.63575686],\n",
       "       [ 0.21423198],\n",
       "       [ 0.60933103],\n",
       "       [-0.25213046],\n",
       "       [-0.38848493],\n",
       "       [ 0.71203004],\n",
       "       [-0.06236788],\n",
       "       [ 0.43614623],\n",
       "       [ 0.36189048],\n",
       "       [-0.3162843 ],\n",
       "       [ 1.3045745 ],\n",
       "       [ 1.27405019],\n",
       "       [ 1.40096117],\n",
       "       [-0.13993372],\n",
       "       [-0.03663269],\n",
       "       [-0.2108563 ],\n",
       "       [-0.41685142],\n",
       "       [-0.07646717],\n",
       "       [ 0.5640144 ],\n",
       "       [-0.04113251],\n",
       "       [ 1.21497673],\n",
       "       [ 0.22556124],\n",
       "       [ 1.16740925],\n",
       "       [-0.352459  ],\n",
       "       [ 0.44951163],\n",
       "       [ 0.65281376],\n",
       "       [ 0.93752285],\n",
       "       [-0.02919176],\n",
       "       [ 0.57412206],\n",
       "       [ 0.36115192],\n",
       "       [ 1.40367081],\n",
       "       [ 0.26783055],\n",
       "       [ 0.27833793],\n",
       "       [ 0.2691611 ],\n",
       "       [-0.35071243],\n",
       "       [ 0.1460902 ],\n",
       "       [ 0.75742531],\n",
       "       [ 0.6103842 ],\n",
       "       [ 0.11610142],\n",
       "       [ 1.32507911],\n",
       "       [ 0.17464258],\n",
       "       [ 0.1673001 ],\n",
       "       [ 1.04027374],\n",
       "       [ 1.19477315],\n",
       "       [ 0.8410317 ],\n",
       "       [ 0.74945366],\n",
       "       [ 0.35780835],\n",
       "       [ 0.60740719],\n",
       "       [-0.43535483],\n",
       "       [ 1.2457597 ],\n",
       "       [ 1.04312983],\n",
       "       [ 1.13335137],\n",
       "       [ 0.20054867],\n",
       "       [ 0.95888747],\n",
       "       [ 0.55485059],\n",
       "       [ 0.97570378],\n",
       "       [ 1.13778957],\n",
       "       [ 1.22995943],\n",
       "       [ 0.19443884],\n",
       "       [ 1.17721591],\n",
       "       [ 1.0664488 ],\n",
       "       [ 0.73994277],\n",
       "       [-0.11788133],\n",
       "       [ 1.25513618],\n",
       "       [-0.15003385],\n",
       "       [ 1.25703834],\n",
       "       [-0.41275664],\n",
       "       [ 0.55041146],\n",
       "       [-0.41332874],\n",
       "       [ 0.29208951],\n",
       "       [ 0.03713661],\n",
       "       [ 1.36498162],\n",
       "       [ 0.90290522],\n",
       "       [ 1.21133098],\n",
       "       [ 0.87761586],\n",
       "       [ 1.21411696],\n",
       "       [ 0.83618592],\n",
       "       [ 0.65357045],\n",
       "       [ 1.31764014],\n",
       "       [ 0.12588672],\n",
       "       [ 0.36462764],\n",
       "       [ 0.93594122],\n",
       "       [ 0.44685673],\n",
       "       [ 1.26113125],\n",
       "       [ 0.34690275],\n",
       "       [-0.32330131],\n",
       "       [ 0.83507488],\n",
       "       [ 0.17342173],\n",
       "       [ 1.18932661],\n",
       "       [ 0.0806404 ],\n",
       "       [ 0.89038854],\n",
       "       [ 1.09184773],\n",
       "       [ 0.32686121],\n",
       "       [ 1.40117143],\n",
       "       [-0.13295416],\n",
       "       [ 1.43040375]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(X,Y,'b.')\n",
    "plt.plot(X, y_pred, color='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "    m = len(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for i in range(m):\n",
    "    to=0.01\n",
    "    to2=to**2\n",
    "    tosq=2*to**2\n",
    "    exptosq=np.exp(tosq)\n",
    "w = np.exp(-(X - X[i])**2)/exptosq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.74359078],\n",
       "       [0.60350463],\n",
       "       [0.69915332],\n",
       "       [0.74676648],\n",
       "       [0.83884703],\n",
       "       [0.66276441],\n",
       "       [0.82895015],\n",
       "       [0.45515988],\n",
       "       [0.39859148],\n",
       "       [0.8661921 ],\n",
       "       [0.5381513 ],\n",
       "       [0.75958347],\n",
       "       [0.72792141],\n",
       "       [0.42815973],\n",
       "       [0.9954095 ],\n",
       "       [0.99302908],\n",
       "       [0.99955914],\n",
       "       [0.50375826],\n",
       "       [0.54966716],\n",
       "       [0.47285195],\n",
       "       [0.38723414],\n",
       "       [0.5318618 ],\n",
       "       [0.81151572],\n",
       "       [0.54765052],\n",
       "       [0.98698526],\n",
       "       [0.66783677],\n",
       "       [0.98076148],\n",
       "       [0.41323036],\n",
       "       [0.76517779],\n",
       "       [0.84512351],\n",
       "       [0.93451529],\n",
       "       [0.55300454],\n",
       "       [0.815453  ],\n",
       "       [0.72760201],\n",
       "       [0.99960143],\n",
       "       [0.68667411],\n",
       "       [0.69133203],\n",
       "       [0.68726453],\n",
       "       [0.41394598],\n",
       "       [0.6321061 ],\n",
       "       [0.88153387],\n",
       "       [0.8293485 ],\n",
       "       [0.61856072],\n",
       "       [0.9967218 ],\n",
       "       [0.64497848],\n",
       "       [0.64167119],\n",
       "       [0.95838359],\n",
       "       [0.98448827],\n",
       "       [0.90777846],\n",
       "       [0.87889312],\n",
       "       [0.72615505],\n",
       "       [0.82822166],\n",
       "       [0.37990916],\n",
       "       [0.99036978],\n",
       "       [0.95897527],\n",
       "       [0.97557527],\n",
       "       [0.65662695],\n",
       "       [0.93988285],\n",
       "       [0.80792287],\n",
       "       [0.9439609 ],\n",
       "       [0.97628522],\n",
       "       [0.98869618],\n",
       "       [0.65388289],\n",
       "       [0.98214246],\n",
       "       [0.96365631],\n",
       "       [0.87571234],\n",
       "       [0.51348112],\n",
       "       [0.99129924],\n",
       "       [0.49932174],\n",
       "       [0.99148199],\n",
       "       [0.38886414],\n",
       "       [0.80617462],\n",
       "       [0.38863621],\n",
       "       [0.69741121],\n",
       "       [0.58287047],\n",
       "       [0.99861125],\n",
       "       [0.92538446],\n",
       "       [0.98655076],\n",
       "       [0.91838368],\n",
       "       [0.98688343],\n",
       "       [0.90633237],\n",
       "       [0.84539986],\n",
       "       [0.99627242],\n",
       "       [0.62298259],\n",
       "       [0.72910441],\n",
       "       [0.93410972],\n",
       "       [0.76406931],\n",
       "       [0.99186856],\n",
       "       [0.72142437],\n",
       "       [0.42524641],\n",
       "       [0.90599947],\n",
       "       [0.64442873],\n",
       "       [0.983778  ],\n",
       "       [0.60252886],\n",
       "       [0.92195383],\n",
       "       [0.96844772],\n",
       "       [0.71268799],\n",
       "       [0.99956256],\n",
       "       [0.50683028],\n",
       "       [0.99980002]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "  from math import ceil\n",
    "import numpy as np\n",
    "from scipy import linalg\n",
    "for i in range(m):\n",
    "    weights = w[i, :]*X[i]\n",
    "    b = np.array([np.sum(weights*Y), np.sum(weights * Y * X)])\n",
    "    A = np.array([[np.sum(weights), np.sum(weights * X)],\n",
    "                    [np.sum(weights * X), np.sum(weights * X * X)]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "thetanew = linalg.solve(A, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.54263001,  1.159026  ])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "thetanew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    " yest = thetanew[0] + thetanew[1] * X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 9.34591047e-02],\n",
       "       [ 2.86293055e-01],\n",
       "       [ 1.55988409e-01],\n",
       "       [ 8.89037606e-02],\n",
       "       [-5.16030877e-02],\n",
       "       [ 2.05978055e-01],\n",
       "       [-3.54550601e-02],\n",
       "       [ 4.90958078e-01],\n",
       "       [ 5.74280178e-01],\n",
       "       [-9.82113252e-02],\n",
       "       [ 3.74999888e-01],\n",
       "       [ 7.03729479e-02],\n",
       "       [ 1.15748400e-01],\n",
       "       [ 5.30160553e-01],\n",
       "       [-4.60297376e-01],\n",
       "       [-4.41644891e-01],\n",
       "       [-5.19196366e-01],\n",
       "       [ 4.22398033e-01],\n",
       "       [ 3.59273890e-01],\n",
       "       [ 4.65736684e-01],\n",
       "       [ 5.91614086e-01],\n",
       "       [ 3.83615538e-01],\n",
       "       [-7.76343592e-03],\n",
       "       [ 3.62023593e-01],\n",
       "       [-4.05546880e-01],\n",
       "       [ 1.99055086e-01],\n",
       "       [-3.76479827e-01],\n",
       "       [ 5.52265820e-01],\n",
       "       [ 6.22057576e-02],\n",
       "       [-6.20260455e-02],\n",
       "       [-2.36003182e-01],\n",
       "       [ 3.54726960e-01],\n",
       "       [-1.39399203e-02],\n",
       "       [ 1.16199711e-01],\n",
       "       [-5.20852147e-01],\n",
       "       [ 1.73225584e-01],\n",
       "       [ 1.66804841e-01],\n",
       "       [ 1.72412527e-01],\n",
       "       [ 5.51198544e-01],\n",
       "       [ 2.47617438e-01],\n",
       "       [-1.25951011e-01],\n",
       "       [-3.60986179e-02],\n",
       "       [ 2.65942679e-01],\n",
       "       [-4.72827127e-01],\n",
       "       [ 2.30169943e-01],\n",
       "       [ 2.34656712e-01],\n",
       "       [-2.98791156e-01],\n",
       "       [-3.93201083e-01],\n",
       "       [-1.77040355e-01],\n",
       "       [-1.21079775e-01],\n",
       "       [ 1.18242867e-01],\n",
       "       [-3.42794574e-02],\n",
       "       [ 6.02920959e-01],\n",
       "       [-4.24357425e-01],\n",
       "       [-3.00536423e-01],\n",
       "       [-3.55668089e-01],\n",
       "       [ 2.14339514e-01],\n",
       "       [-2.49058462e-01],\n",
       "       [-2.16370543e-03],\n",
       "       [-2.59334398e-01],\n",
       "       [-3.58380134e-01],\n",
       "       [-4.14702356e-01],\n",
       "       [ 2.18073043e-01],\n",
       "       [-3.82472381e-01],\n",
       "       [-3.14785946e-01],\n",
       "       [-1.15267955e-01],\n",
       "       [ 4.08922483e-01],\n",
       "       [-4.30087111e-01],\n",
       "       [ 4.28569918e-01],\n",
       "       [-4.31249461e-01],\n",
       "       [ 5.89111891e-01],\n",
       "       [ 5.48912384e-04],\n",
       "       [ 5.89461480e-01],\n",
       "       [ 1.58401668e-01],\n",
       "       [ 3.14195693e-01],\n",
       "       [-4.97210344e-01],\n",
       "       [-2.14849392e-01],\n",
       "       [-4.03319075e-01],\n",
       "       [-1.99395826e-01],\n",
       "       [-4.05021501e-01],\n",
       "       [-1.74079242e-01],\n",
       "       [-6.24884336e-02],\n",
       "       [-4.68281398e-01],\n",
       "       [ 2.59963175e-01],\n",
       "       [ 1.14075802e-01],\n",
       "       [-2.35036695e-01],\n",
       "       [ 6.38280830e-02],\n",
       "       [-4.33750520e-01],\n",
       "       [ 1.24906947e-01],\n",
       "       [ 5.34448438e-01],\n",
       "       [-1.73400316e-01],\n",
       "       [ 2.30915967e-01],\n",
       "       [-3.89872865e-01],\n",
       "       [ 2.87611838e-01],\n",
       "       [-2.07200829e-01],\n",
       "       [-3.30306463e-01],\n",
       "       [ 1.37153725e-01],\n",
       "       [-5.19324845e-01],\n",
       "       [ 4.18133030e-01],\n",
       "       [-5.37187835e-01]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2.82439061e-01]\n",
      " [-9.92460705e-01]\n",
      " [-2.25371403e-02]\n",
      " [ 5.94998593e-01]\n",
      " [ 7.61861341e-01]\n",
      " [-4.23406483e-01]\n",
      " [ 1.00967411e+00]\n",
      " [-5.47507198e-01]\n",
      " [-5.77533764e-01]\n",
      " [ 1.71958564e+00]\n",
      " [-8.93705347e-01]\n",
      " [ 5.95479309e-01]\n",
      " [ 1.69100494e-01]\n",
      " [-6.83370724e-01]\n",
      " [ 1.70575562e+00]\n",
      " [ 1.35866183e+00]\n",
      " [ 1.52699409e+00]\n",
      " [-7.09383342e-01]\n",
      " [-4.61930006e-01]\n",
      " [-5.02121468e-01]\n",
      " [-3.00966815e-04]\n",
      " [-8.34968114e-01]\n",
      " [ 1.20352326e+00]\n",
      " [-6.99692190e-01]\n",
      " [ 1.50600540e+00]\n",
      " [-3.62858706e-01]\n",
      " [ 1.17944435e+00]\n",
      " [-5.91385461e-01]\n",
      " [ 4.61121484e-01]\n",
      " [ 8.62972215e-01]\n",
      " [ 1.84983946e+00]\n",
      " [-9.14388360e-01]\n",
      " [ 4.21457101e-01]\n",
      " [-2.34772900e-01]\n",
      " [ 1.20860279e+00]\n",
      " [-2.55994780e-01]\n",
      " [-2.39994003e-01]\n",
      " [-1.89589618e-01]\n",
      " [-2.45223658e-01]\n",
      " [-7.25836524e-01]\n",
      " [ 1.79497805e+00]\n",
      " [ 7.89059226e-01]\n",
      " [-7.76429805e-01]\n",
      " [ 1.73419186e+00]\n",
      " [-2.90315499e-01]\n",
      " [-4.08998563e-01]\n",
      " [ 1.36819618e+00]\n",
      " [ 2.03701763e+00]\n",
      " [ 1.80796407e+00]\n",
      " [ 1.87537012e+00]\n",
      " [-3.95692206e-01]\n",
      " [ 1.27868565e+00]\n",
      " [-5.13412404e-01]\n",
      " [ 1.63804763e+00]\n",
      " [ 1.39116032e+00]\n",
      " [ 2.05238437e+00]\n",
      " [-2.27362089e-01]\n",
      " [ 1.81794534e+00]\n",
      " [ 6.19445453e-01]\n",
      " [ 1.32788808e+00]\n",
      " [ 1.89665006e+00]\n",
      " [ 1.50748342e+00]\n",
      " [-3.27764779e-01]\n",
      " [ 2.01204052e+00]\n",
      " [ 2.23450949e+00]\n",
      " [ 1.70549970e+00]\n",
      " [-1.29936071e+00]\n",
      " [ 1.36301895e+00]\n",
      " [-5.49755579e-01]\n",
      " [ 1.17065718e+00]\n",
      " [-2.15446110e-01]\n",
      " [ 2.49488201e-01]\n",
      " [-5.34961055e-01]\n",
      " [-7.52019692e-01]\n",
      " [-5.18223500e-01]\n",
      " [ 9.64878779e-01]\n",
      " [ 1.53903095e+00]\n",
      " [ 2.01684725e+00]\n",
      " [ 1.86208058e+00]\n",
      " [ 1.11555837e+00]\n",
      " [ 1.24892316e+00]\n",
      " [ 1.19698865e+00]\n",
      " [ 1.43773631e+00]\n",
      " [-9.57452448e-01]\n",
      " [ 4.13775905e-01]\n",
      " [ 1.84433133e+00]\n",
      " [ 3.26251793e-01]\n",
      " [ 1.58022561e+00]\n",
      " [ 1.45933820e-01]\n",
      " [-6.52279813e-01]\n",
      " [ 1.48024021e+00]\n",
      " [-8.89424603e-01]\n",
      " [ 1.31272068e+00]\n",
      " [-3.20941368e-01]\n",
      " [ 1.91625606e+00]\n",
      " [ 1.73394754e+00]\n",
      " [-4.26939647e-01]\n",
      " [ 8.99684936e-01]\n",
      " [-1.23959957e+00]\n",
      " [ 1.00110273e+00]]\n"
     ]
    }
   ],
   "source": [
    "  residuals = Y - yest\n",
    "print(residuals)\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "\n",
    "plt.plot(X,Y,'b.')\n",
    "plt.plot(X, y_pred, color='g',label ='unweighted linear regression')\n",
    "plt.plot(X,Y,'b.')\n",
    "plt.plot(X, yest, color='r')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
